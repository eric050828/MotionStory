name: Deploy to Render

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  # ===================================
  # Linting and Code Quality
  # ===================================
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt

      - name: Run Black (formatter check)
        run: |
          cd api
          black --check src/ tests/

      - name: Run isort (import sorting check)
        run: |
          cd api
          isort --check-only src/ tests/

      - name: Run Flake8 (linter)
        run: |
          cd api
          flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503

  # ===================================
  # Backend Testing
  # ===================================
  test-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: motionstory_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt

      - name: Run pytest with coverage
        env:
          MONGODB_URI: mongodb://localhost:27017
          DB_NAME: motionstory_test
          JWT_SECRET_KEY: test-secret-key-for-ci-only
          ENVIRONMENT: test
          DEBUG: False
        run: |
          cd api
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push'
        with:
          file: ./api/coverage.xml
          fail_ci_if_error: false

  # ===================================
  # Docker Build Test
  # ===================================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd api
          docker build -t motionstory-api:test .

      - name: Test Docker image
        run: |
          docker run -d --name test-container \
            -e MONGODB_URI=mongodb://localhost:27017 \
            -e DB_NAME=motionstory_test \
            -e JWT_SECRET_KEY=test-secret \
            -e ENVIRONMENT=test \
            -p 8000:8000 \
            motionstory-api:test

          # Wait for container to start
          sleep 10

          # Check health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker stop test-container
          docker rm test-container

  # ===================================
  # Deploy to Render (Production)
  # ===================================
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [lint, test-backend, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger Render deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          # Trigger Render deployment via API
          curl -X POST \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'

      - name: Wait for deployment
        run: |
          echo "Waiting for Render deployment to complete..."
          sleep 60

      - name: Verify deployment
        run: |
          # Check health endpoint
          curl -f https://motionstory-api.onrender.com/health || exit 1
          echo "âœ“ Deployment verified successfully"

      - name: Initialize MongoDB indexes
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          # Install Python dependencies
          pip install motor pymongo

          # Run index initialization
          python scripts/init_indexes.py

  # ===================================
  # Notify Deployment Status
  # ===================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Send notification (Slack, Discord, etc.)
        run: |
          # Add your notification logic here
          # Example: Slack webhook
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"MotionStory API deployed successfully"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
          echo "Deployment completed"
